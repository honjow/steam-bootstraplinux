name: Create Release

on:
  push:
    tags:
      - '*'

permissions:
      contents: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        lfs: true
    
    - name: Download LFS objects
      run: git lfs pull
    
    - name: Verify LFS files are downloaded
      run: |
        echo "Checking LFS files..."
        lfs_files=$(find bootstraplinux_ubuntu12_32 -type f -name "*.dll" -o -name "*.exe" -o -name "*.so" -o -name "*.tar.xz" | head -10)
        for file in $lfs_files; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "File: $file, Size: $size bytes"
            if [ $size -lt 1000 ]; then
              echo "Warning: $file might be an LFS pointer (size: $size bytes)"
              head -n 3 "$file"
            fi
          fi
        done
    
    - name: Package source files
      run: |
        echo "Packaging source files..."
        tar -cf source-files.tar bootstraplinux_ubuntu12_32/
        echo "Package created: source-files.tar"
        ls -lh source-files.tar
    
    - name: Upload source files
      uses: actions/upload-artifact@v4
      with:
        name: source-files
        path: source-files.tar
        retention-days: 1
        if-no-files-found: error

  compress:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [tar-gz, tar-xz, zip]
    steps:
    - name: Download source files
      uses: actions/download-artifact@v4
      with:
        name: source-files
    
    - name: Extract source files
      run: |
        echo "Extracting source files..."
        tar -xf source-files.tar
        echo "Source files extracted"
        ls -la
    
    - name: Create archive
      run: |
        case "${{ matrix.format }}" in
          tar-gz)
            echo "Creating tar.gz archive..."
            cd bootstraplinux_ubuntu12_32
            tar -czf ../steam-bootstraplinux-${{ github.ref_name }}.tar.gz .
            cd ..
            echo "Archive created: steam-bootstraplinux-${{ github.ref_name }}.tar.gz"
            ;;
          tar-xz)
            echo "Creating tar.xz archive..."
            cd bootstraplinux_ubuntu12_32
            XZ_OPT="-9 -T0" tar -cJf ../steam-bootstraplinux-${{ github.ref_name }}.tar.xz .
            cd ..
            echo "Archive created: steam-bootstraplinux-${{ github.ref_name }}.tar.xz"
            ;;
          zip)
            echo "Creating zip archive..."
            cd bootstraplinux_ubuntu12_32
            zip -r ../steam-bootstraplinux-${{ github.ref_name }}.zip .
            cd ..
            echo "Archive created: steam-bootstraplinux-${{ github.ref_name }}.zip"
            ;;
        esac
        
        # Get file info
        archive_file=$(ls steam-bootstraplinux-${{ github.ref_name }}.* 2>/dev/null | head -n1)
        if [ -f "$archive_file" ]; then
          echo "Archive file: $archive_file"
          echo "Archive size: $(stat -c%s "$archive_file") bytes"
          ls -lh "$archive_file"
        fi
    
    - name: Upload archive
      uses: actions/upload-artifact@v4
      with:
        name: archive-${{ matrix.format }}
        path: steam-bootstraplinux-${{ github.ref_name }}.*
        retention-days: 1
        if-no-files-found: error

  release:
    needs: compress
    runs-on: ubuntu-latest
    steps:
    - name: Download all archives
      uses: actions/download-artifact@v4
      with:
        pattern: archive-*
        merge-multiple: true
    
    - name: List downloaded files
      run: |
        echo "Downloaded files:"
        ls -la
    
    - name: Generate release notes
      run: |
        echo "包含完整LFS文件的发布包。" > release_notes.md
        echo "" >> release_notes.md
        echo "解压即可使用。" >> release_notes.md
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        body_path: release_notes.md
        files: steam-bootstraplinux-${{ github.ref_name }}.*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 